{
	"variables": [],
	"info": {
		"name": "IoT-Things",
		"_postman_id": "81b8c9c9-8966-772e-e542-3d28d66f4cf5",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "messages",
			"description": "",
			"item": [
				{
					"name": "Send a message TO a Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/inbox/messages/randomMessageSubject",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "some random body"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Send a message TO a Feature",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/features/someFeature/inbox/messages/someMessageSubject",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"some\":\"json\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Send a message FROM a Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/outbox/messages/randomMessageSubject",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "some random body"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Send a message FROM a Feature",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/features/someFeature/outbox/messages/someMessageSubject",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"some\":\"json\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Claim a Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/inbox/claim",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "you shall be mine!"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Claim a Thing with timeout",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/inbox/claim?timeout=10",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "you shall be mine!"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Messages Service status",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/status/messages",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "policies",
			"description": "",
			"item": [
				{
					"name": "Create or update a Policy",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"entries\": {\r\n    \"ALL\": {\r\n      \"subjects\": {\r\n        \"iot-permissions:test\": {\r\n          \"type\": \"iot-permissions-sid\"\r\n        }\r\n      },\r\n      \"resources\": {\r\n        \"policy:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        },\r\n        \"thing:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        },\r\n        \"message:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Modify the entries of a specific Policy",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"ALL\": {\r\n\t  \"subjects\": {\r\n\t    \"iot-permissions:test\": {\r\n\t      \"type\": \"iot-permissions-sid\"\r\n\t    }\r\n\t  },\r\n\t  \"resources\": {\r\n\t    \"policy:/\": {\r\n\t      \"grant\": [\r\n\t        \"READ\",\r\n\t        \"WRITE\"\r\n\t      ],\r\n\t      \"revoke\": []\r\n\t    },\r\n\t    \"thing:/\": {\r\n\t      \"grant\": [\r\n\t        \"READ\",\r\n\t        \"WRITE\"\r\n\t      ],\r\n\t      \"revoke\": []\r\n\t    },\r\n\t    \"message:/\": {\r\n\t      \"grant\": [\r\n\t        \"READ\",\r\n\t        \"WRITE\"\r\n\t      ],\r\n\t      \"revoke\": []\r\n\t    }\r\n\t  }\r\n\t}\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create or modify one Policy entry of a Policy for a specific label",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subjects\": {\r\n    \"iot-permissions:restricted\": {\r\n      \"type\": \"iot-permissions-sid\"\r\n    }\r\n  },\r\n  \"resources\": {\r\n    \"policy:/\": {\r\n      \"grant\": [],\r\n      \"revoke\": []\r\n    },\r\n    \"thing:/\": {\r\n      \"grant\": [\r\n        \"READ\"\r\n      ],\r\n      \"revoke\": []\r\n    },\r\n    \"thing:/attributes\": {\r\n      \"grant\": [\r\n        \"READ\"\r\n      ],\r\n      \"revoke\": []\r\n    },\r\n    \"thing:/attributes/VIN\": {\r\n      \"grant\": [],\r\n      \"revoke\": [\r\n      \t\"WRITE\"\r\n      ]\r\n    },\r\n    \"thing:/features/EnvironmentScanner/properties/temperature\": {\r\n      \"grant\": [\r\n        \"WRITE\"\r\n      ],\r\n      \"revoke\": []\r\n    },\r\n    \"message:/\": {\r\n      \"grant\": [],\r\n      \"revoke\": []\r\n    }\r\n  }\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create or modify all Subjects of a Policy Entry",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/subjects",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"iot-permissions:restricted\": {\r\n\t  \"type\": \"iot-permissions-sid\"\r\n\t}\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create or modify one specific Subject of a Policy entry",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/subjects/iot-permissions:restricted",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"type\": \"iot-permissions-sid\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create or modify all Resources of a Policy Entry",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/resources",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"policy:/\": {\r\n\t  \"grant\": [],\r\n\t  \"revoke\": []\r\n\t},\r\n\t\"thing:/\": {\r\n\t  \"grant\": [\r\n\t    \"READ\"\r\n\t  ],\r\n\t  \"revoke\": []\r\n\t},\r\n\t\"thing:/attributes\": {\r\n\t  \"grant\": [\r\n\t    \"READ\"\r\n\t  ],\r\n\t  \"revoke\": []\r\n\t},\r\n\t\"thing:/attributes/VIN\": {\r\n\t  \"grant\": [],\r\n\t  \"revoke\": [\r\n\t  \t\"WRITE\"\r\n\t  ]\r\n\t},\r\n\t\"thing:/features/EnvironmentScanner/properties/temperature\": {\r\n\t  \"grant\": [\r\n\t    \"WRITE\"\r\n\t  ],\r\n\t  \"revoke\": []\r\n\t},\r\n\t\"message:/\": {\r\n\t  \"grant\": [],\r\n\t  \"revoke\": []\r\n\t}\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create or modify one specific Resource of a Policy entry",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/resources/thing:/attributes",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"grant\": [\r\n\t\t\"READ\"\r\n\t],\r\n\t\"revoke\": []\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Retrieve a specific Policy",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"entries\": {\r\n    \"ALL\": {\r\n      \"subjects\": {\r\n        \"iot-permissions:test\": {\r\n          \"type\": \"iot-permissions-sid\"\r\n        }\r\n      },\r\n      \"resources\": {\r\n        \"policy:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        },\r\n        \"thing:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        },\r\n        \"message:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Retrieve the entries of a specific Policy",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"entries\": {\r\n    \"ALL\": {\r\n      \"subjects\": {\r\n        \"iot-permissions:test\": {\r\n          \"type\": \"iot-permissions-sid\"\r\n        }\r\n      },\r\n      \"resources\": {\r\n        \"policy:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        },\r\n        \"thing:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        },\r\n        \"message:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Retrieve one Policy entry of a Policy for a specific label",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subjects\": {\r\n    \"iot-permissions:restricted\": {\r\n      \"type\": \"iot-permissions-sid\"\r\n    }\r\n  },\r\n  \"resources\": {\r\n    \"policy:/\": {\r\n      \"grant\": [],\r\n      \"revoke\": []\r\n    },\r\n    \"thing:/\": {\r\n      \"grant\": [\r\n        \"READ\"\r\n      ],\r\n      \"revoke\": []\r\n    },\r\n    \"thing:/attributes\": {\r\n      \"grant\": [\r\n        \"READ\"\r\n      ],\r\n      \"revoke\": []\r\n    },\r\n    \"thing:/attributes/VIN\": {\r\n      \"grant\": [],\r\n      \"revoke\": [\r\n      \t\"WRITE\"\r\n      ]\r\n    },\r\n    \"thing:/features/EnvironmentScanner/properties/temperature\": {\r\n      \"grant\": [\r\n        \"WRITE\"\r\n      ],\r\n      \"revoke\": []\r\n    },\r\n    \"message:/\": {\r\n      \"grant\": [],\r\n      \"revoke\": []\r\n    }\r\n  }\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Retrieve all Subjects of a Policy entry",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/subjects",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"iot-permissions:restricted\": {\r\n\t  \"type\": \"iot-permissions-sid\"\r\n\t}\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Retrieve one specific Subject of a Policy entry",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/subjects/iot-permissions:restricted",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"type\": \"iot-permissions-sid\"\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Retrieve all Resources of a Policy entry",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/resources",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"policy:/\": {\r\n\t  \"grant\": [],\r\n\t  \"revoke\": []\r\n\t},\r\n\t\"thing:/\": {\r\n\t  \"grant\": [\r\n\t    \"READ\"\r\n\t  ],\r\n\t  \"revoke\": []\r\n\t},\r\n\t\"thing:/attributes\": {\r\n\t  \"grant\": [\r\n\t    \"READ\"\r\n\t  ],\r\n\t  \"revoke\": []\r\n\t},\r\n\t\"thing:/attributes/VIN\": {\r\n\t  \"grant\": [],\r\n\t  \"revoke\": [\r\n\t  \t\"WRITE\"\r\n\t  ]\r\n\t},\r\n\t\"thing:/features/EnvironmentScanner/properties/temperature\": {\r\n\t  \"grant\": [\r\n\t    \"WRITE\"\r\n\t  ],\r\n\t  \"revoke\": []\r\n\t},\r\n\t\"message:/\": {\r\n\t  \"grant\": [],\r\n\t  \"revoke\": []\r\n\t}\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Retrieve one specific Resource of a Policy entry",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/resources/thing:/attributes",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"grant\": [\r\n\t\t\"READ\"\r\n\t],\r\n\t\"revoke\": []\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete a specific Policy",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"entries\": {\r\n    \"ALL\": {\r\n      \"subjects\": {\r\n        \"iot-permissions:test\": {\r\n          \"type\": \"iot-permissions-sid\"\r\n        }\r\n      },\r\n      \"resources\": {\r\n        \"policy:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        },\r\n        \"thing:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        },\r\n        \"message:/\": {\r\n          \"grant\": [\r\n            \"READ\",\r\n            \"WRITE\"\r\n          ],\r\n          \"revoke\": []\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete one Policy entry of a Policy for a specific label",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete one specific Subject of a Policy entry",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/subjects/iot-permissions:restricted",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete one Resource of a Policy entry",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/2/policies/{{namespace}}:myPolicy/entries/RESTRICTED/resources/thing:/attributes",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "relations",
			"description": "",
			"item": [
				{
					"name": "Create: A Relation ",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/relations",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"source\": \"<source>\",\r\n  \"target\": \"<target>\",\r\n  \"attributes\": {}\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create: A Relation with complex attributes",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/relations",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"source\": \"<source>\",\r\n  \"target\": \"<target>\",\r\n  \"attributes\": {\r\n    \"simpleString\": \"simple\",\r\n    \"simpleInt\": 42,\r\n    \"nested\": {\r\n      \"nestedString\": \"nested\",\r\n      \"nestedBoolean\": false,\r\n      \"subnested\" : {\r\n        \"list\": [\r\n          1,2,3,5,8\r\n        ],\r\n        \"some\": \"value\"\r\n      }\r\n    },\r\n    \"toplist\": [\r\n      \"IOT\",\"BUM\",\"FOO\"\r\n    ],\r\n    \"toplistWithObjects\": [\r\n      {\r\n        \"thevalue\": 1,\r\n        \"nested\": {\r\n          \"bum\": \"lux\",\r\n          \"foo\": 3\r\n        }\r\n      },\r\n      {\r\n        \"thevalue\": 2,\r\n        \"nested\": {\r\n          \"bum\": \"ta\",\r\n          \"foo\": 6\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create: A Relation with given ID",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"source\": \"<source>\",\r\n  \"target\": \"<target>\",\r\n  \"attributes\": {\r\n      parent:{\r\n          child:{\r\n              attribute:\"cool\"\r\n          }\r\n      }\r\n  }\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create: A new Attribute at an existing Relation",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation/attributes/<new-attribute>",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"<the new Attribute>\"\n"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update: A Relation ",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"source\":\"<source>\",\n  \"target\":\"<target>\",\n  \"attributes\": {\n    \"foo\":\"bar\",\n    \"baz\": 42\n  }\n}\n"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update: A Attribute at an existing Relation",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation/attributes/<attribute>",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"<the new value for the Attribute>\""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete: One Relation ",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic Q1JhYVMtVXNlcjpDUmFhUy1Vc2VyUHcxIQ==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete: Attribute of a Relation",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation/attributes/<attribute>",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic Q1JhYVMtVXNlcjpDUmFhUy1Vc2VyUHcxIQ==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: One Relation",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: One Relation (relationId,source,target)",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation?fields=relationId,source,target",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": "Queries a Relation with the \"relationId\",\"source\" and \"target\" field selector."
					},
					"response": []
				},
				{
					"name": "Query: A List of Relations",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/relations?ids={{namespace}}:MyRelation,{{namespace}}:MyRelation2>",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": "Queries a list of Relations"
					},
					"response": []
				},
				{
					"name": "Query: A List of Relations (relationId,source,target)",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/relations?ids={{namespace}}:MyRelation,{{namespace}}:MyRelation2>&fields=relationId,source,target",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": "Queries a list of Relations with the \"relationId\",\"source\" and \"target\" field selector"
					},
					"response": []
				},
				{
					"name": "Query: Attributes of one Relation",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation/attributes",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: Attributes of one Relation with field selector: only partial structures",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation?fields=attributes(<attributeObject>(<attribute1>,<attribute2>))",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: Attributes of one Relation with field selector: only partial structures of a list of objects",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/relations/{{namespace}}:MyRelation?fields=attributes(<topAttributeObject>(<nestedAttributeObject>/<attribute>))",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "search-relations",
			"description": "",
			"item": [
				{
					"name": "(equals): A Relation with a given relationId",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/relations?search=eq(relationId,\"<relationId>\")",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(not equals): All Relations with not the given Attribute Value",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/relations?search=ne(attributes/<attribute>,<attributeValue>)",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(greater than): All Relations greater than the given Attribute Value",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/relations?search=gt(attributes/<attribute>,<attributeValue>)",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(greater equals): All Relations greater equals the given Attribute Value",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/relations?search=ge(attributes/<attribute>,<attributeValue>)",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(less then): All Relations less then the given Attribute Value",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/relations?search=lt(attributes/<attribute>,<attributeValue>)",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(less equals): All Relations less equals the given Attribute Value",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/relations?search=le(attributes/<attribute>,<attributeValue>)",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(in): List of Relations with a List of given relationIds",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/relations?search=in(relationId,\"<relationId>,<relationId2>,<relationdId3>\")",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(like): A Relation with a partial given relationID",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/relations?search=like(relationId,\"<likePredicate>\")",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": "Starts with = \\*, \nEnds with = \\*, \nWildcard for one Char = ?,\nWildcard for many Chars = \\*"
					},
					"response": []
				},
				{
					"name": "(and): All Relations with two given Attribute Values",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/relations?search=and(eq(attributes/<attribute>,<attributeValue>),eq(attributes/<attribute>,<attributeValue>))",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(or): All Relations with one of the two given Attributes Values or both",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/relations?search=or(eq(attributes/<attribute>,<attributeValue>),eq(attributes/<attribute>,<attributeValue>))",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(not): All Relations not greater than a given Attribute Values",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/relations?search=not(gt(attributes/<attribute>,<attributeValue>))",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(sort): All Relations with a higher or equal Attribute Value than the given  sorted descending",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/relations?search=ge(attributes/<sortAtt>,<attributeValue>)&option=sort(-attributes/<sortAtt>)",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": "Sort ascending = +,\nSort descending = -,\nSort with two criterias: \nsort(+attributes/att1,-attributes/att2)"
					},
					"response": []
				},
				{
					"name": "(limit): All Relations with a higher or equal Attribute Value than the given  and among these the second ten elements",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/relations?search=ge(attributes/<sortAtt>,<attributeValue>)&option=limit(10,10)",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": "maximum allowed count is 200"
					},
					"response": []
				},
				{
					"name": "(sort&limit): All Relations with a higher or equal Attribute Value than the given  sorted descending  and among these the second ten elements",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/relations?search=ge(attributes/<sortAtt>,<attributeValue>)&option=sort(-attributes/<sortAtt>),limit(10,10)",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "search-things",
			"description": "",
			"item": [
				{
					"name": "(equals): A Thing with a given thingId",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/things?search=eq(thingId,\"<thingId>\")",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(not equals): All Things with not the given Attribute Value",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/things?search=ne(attributes/<attribute>,<attributeValue>)",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(greater than): All Things greater than the given Attribute Value",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/things?search=gt(attributes/<attribute>,<attributeValue>)",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(greater equals): All Things greater equals the given Attribute Value",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/things?search=ge(attributes/<attribute>,<attributeValue>)",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(less then): All Things less then the given Attribute Value",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/things?search=lt(attributes/<attribute>,<attributeValue>)",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(less equals): All Things less equals the given Attribute Value",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/things?search=le(attributes/<attribute>,<attributeValue>)",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(in): List of Things with a List of  given thingIds",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/things?search=in(thingId,\"<thingId>,<thingId2>,<thingId3>\")",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(like): A Thing with a partial given thingId",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/things?search=like(thingId,\"<thingId>\")",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": "Starts with = \\*, \nEnds with = \\*, \nWildcard for one Char = ?,\nWildcard for many Chars = \\*"
					},
					"response": []
				},
				{
					"name": "(and): All Things with two given Attribute Values",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/things?search=and(eq(attributes/<attribute>,<attributeValue>),eq(attributes/<attribute>,<attributeValue>))",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(or): All Things with one of the two given Attributes Values or both",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/things?search=or(eq(attributes/<attribute>,<attributeValue>),eq(attributes/<attribute>,<attributeValue>))",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(not): All Things not greater than a given Attribute Values",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/things?search=not(gt(attributes/<attribute>,<attributeValue>))",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "(sort): All Things with a higher or equal Attribute Value than the given  sorted descending",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/things?search=ge(attributes/<sortAtt>,<attributeValue>)&option=sort(-attributes/<sortAtt>)",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": "Sort ascending = +,\nSort descending = -,\nSort with two criterias: \nsort(+attributes/att1,-attributes/att2)"
					},
					"response": []
				},
				{
					"name": "(limit): All Things with a higher or equal Attribute Value than the given  and among these the second ten elements",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/things?search=ge(attributes/<sortAtt>,<attributeValue>)&option=limit(10,10)",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": "maximum allowed count is 200"
					},
					"response": []
				},
				{
					"name": "(sort&limit): All Things with a higher or equal Attribute Value than the given  sorted descending  and among these the second ten elements",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/search/things?search=ge(attributes/<sortAtt>,<attributeValue>)&option=sort(-attributes/<sortAtt>),limit(10,10)",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "things",
			"description": "",
			"item": [
				{
					"name": "Create: A Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributes\": {\n    \"manufacturer\": \"ACME\",\n    \"make\": \"Fancy Fab Car\",\n    \"model\": \"Environmental FourWheeler 4711\",\n    \"VIN\": \"0815666337\"\n  },\n  \"features\": {\n    \"Vehicle\": {\n      \"properties\": {\n        \"configuration\": {\n          \"transmission\": {\n            \"type\": \"manual\",\n            \"gears\": 7\n          }\n        },\n        \"status\": {\n          \"running\": true,\n          \"speed\": 90,\n          \"gear\": 5\n        },\n        \"fault\": {\n          \"flatTyre\": false\n        }\n      }\n    },\n    \"EnvironmentScanner\": {\n      \"properties\": {\n          \"temperature\": 20.8,\n          \"humidity\": 73,\n          \"barometricPressure\": 970.7,\n          \"location\": {\n            \"longitude\": 47.682170,\n            \"latitude\": 9.386372\n          },\n          \"altitude\": 399\n      }\n    }\n  }\n}\n"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create: An empty Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create: A Thing with complex attributes",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributes\": {\n    \"simpleString\": \"simple\",\n    \"simpleInt\": 42,\n    \"nested\": {\n      \"nestedString\": \"nested\",\n      \"nestedBoolean\": false,\n      \"subnested\" : {\n        \"list\": [\n          1,2,3,5,8\n        ],\n        \"some\": \"value\"\n      }\n    },\n    \"toplist\": [\n      \"IOT\",\"BUM\",\"FOO\"\n    ],\n    \"toplistWithObjects\": [\n      {\n        \"thevalue\": 1,\n        \"nested\": {\n          \"bum\": \"lux\",\n          \"foo\": 3\n        }\n      },\n      {\n        \"thevalue\": 2,\n        \"nested\": {\n          \"bum\": \"ta\",\n          \"foo\": 6\n        }\n      }\n    ]\n  },\n  \"features\": {\n  }\n}\n"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create: A Thing with given ID",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributes\": {\n    \"manufacturer\": \"ACME\",\n    \"make\": \"Fancy Fab Car\",\n    \"model\": \"Environmental FourWheeler 4711\",\n    \"VIN\": \"0815666337\"\n  },\n  \"features\": {\n    \"Vehicle\": {\n      \"properties\": {\n        \"configuration\": {\n          \"transmission\": {\n            \"type\": \"manual\",\n            \"gears\": 7\n          }\n        },\n        \"status\": {\n          \"running\": true,\n          \"speed\": 90,\n          \"gear\": 5\n        },\n        \"fault\": {\n          \"flatTyre\": false\n        }\n      }\n    },\n    \"EnvironmentScanner\": {\n      \"properties\": {\n          \"temperature\": 20.8,\n          \"humidity\": 73,\n          \"barometricPressure\": 970.7,\n          \"location\": {\n            \"longitude\": 47.682170,\n            \"latitude\": 9.386372\n          },\n          \"altitude\": 399\n      }\n    }\n  }\n}\n"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create: A new Attribute at an existing Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/attributes/new",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"someValue\"\n"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Create: A new Property of a Thing's Feature",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/features/EnvironmentScanner/properties/brightness",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "1400"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update: A Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attributes\": {\n    \"foo\":\"bar\",\n    \"baz\": 42\n  }\n}\n"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update: An existing Attribute at an existing Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/attributes/new",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "23"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update: ACL of a Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/acl",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ed420ff0-b1c96661e4-9070-3863bbc77d82\": {\n    \"READ\": true,\n    \"WRITE\": true,\n    \"ADMINISTRATE\": true\n  },\n  \"edca04a0-b1c96661e4-9070-3863bbc77d82\": {\n    \"READ\": true,\n    \"WRITE\": false,\n    \"ADMINISTRATE\": false\n  }\n}\n"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update: All  Features of a Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/features",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"abc\":{\n        \"properties\":{\n            \"foo\":\"bar\"\n        }\n    },\n  \"test\":{\n        \"properties\":{\n            \"foo2\":\"bar2\"\n        }\n    }\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update: Feature of a Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/features/abc",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"properties\":{\n        \"foo\":\"bar\"\n    }\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update: All Properties of a Thing's Feature",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/features/EnvironmentScanner/properties",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"temperature\": 20.8,\n  \"humidity\": 73,\n  \"barometricPressure\": 970.7,\n  \"location\": {\n    \"longitude\": 47.682170,\n    \"latitude\": 9.386372\n  },\n  \"altitude\": 399\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update: One Property of a Thing's Feature",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/features/EnvironmentScanner/properties/location",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"longitude\": 49.008085,\n  \"latitude\": 8.403756\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: A List of Things",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things?ids={{namespace}}:CRaaSCar,{{namespace}}:CRaaSCar1,{{namespace}}:CRaaSCar2",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: A List of Things (thingId,acl)",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things?ids={{namespace}}:CRaaSCar,{{namespace}}:CRaaSCar1,{{namespace}}:CRaaSCar2&fields=thingId,acl",
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Queries a list of Things with the \"thingId\" and \"acl\" field selector"
					},
					"response": []
				},
				{
					"name": "Query: One Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: One Thing (thingId,acl)",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar?fields=thingId,acl",
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Queries a Thing with the \"thingId\" and \"acl\" field selector."
					},
					"response": []
				},
				{
					"name": "Query: Attributes of one Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/attributes",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: Attributes of one Thing: single attribute object",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/attributes/nested",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: Attributes of one Thing with field selector: only partial structures",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar?fields=attributes(nested(nestedString,nestedBoolean))",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: Attributes of one Thing with field selector: only partial structures of a list of objects",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar?fields=attributes(toplistWithObjects(nested/foo))",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: ACL of a Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/acl",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ed420ff0-b1c96661e4-9070-3863bbc77d82\": {\n    \"READ\": true,\n    \"WRITE\": true,\n    \"ADMINISTRATE\": true\n  },\n  \"edca04a0-b1c96661e4-9070-3863bbc77d82\": {\n    \"READ\": true\n  }\n}\n"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: ACL Entry of a Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/features",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: All Features of a Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/features",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: Feature of a Thing ",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/features/Vehicle",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: All Properties of a Thing's Feature",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/features/EnvironmentScanner/properties",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: One Property of a Thing's Feature",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/features/EnvironmentScanner/properties/location",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete: One Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete: Attribute of a Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/attributes/new",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete: ACL Entry of a Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/acl/ed420ff0-b1c96661e4-9070-3863bbc77d82",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete: Features of a Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/features",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete: Feature of a Thing",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/features/Vehicle",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete: All Properties of a Thing's Feature",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/features/EnvironmentScanner/properties",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "1400"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete: One Property of a Thing's Feature",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/things/{{namespace}}:CRaaSCar/features/EnvironmentScanner/properties/brightness",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "1400"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "topologies",
			"description": "",
			"item": [
				{
					"name": "Create: A Topology",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/topologies/{{namespace}}:Topology",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"query\":\"mutation{createTopology(topology:{campus:[{id:\\\"0bfe\\\",location:\\\"Chicago\\\",errorReport:{uri:\\\"error:\\/\\/0bfe\\\"},buildings:[{id:\\\"be93\\\",displayName:\\\"161 North Clark\\\",errorReport:{uri:\\\"error:\\/\\/be93\\\"},levels:50,base:3,roof:0,floors:[{id:\\\"b535\\\",displayName:\\\"Suite 3550\\\",errorReport:{uri:\\\"error:\\/\\/b535\\\"},floorPlan:{uri:\\\"floor:\\/\\/b535\\\"},rooms:[{id:\\\"ddd5\\\",displayName:\\\"Reception\\\",errorReport:{uri:\\\"error:\\/\\/ddd5\\\"},devices:[{id:\\\"7b37\\\",displayName:\\\"Reception desk\\\",deviceType:\\\"Desk\\\",errorReport:{uri:\\\"error:\\/\\/7b37\\\"},childDevices:[{id:\\\"73d7\\\",displayName:\\\"Panic button\\\",deviceType:\\\"Button\\\",errorReport:{uri:\\\"error:\\/\\/73d7\\\"},sensorData:{uri:\\\"sensor:\\/\\/73d7\\\"}}]}]}]}]}],groups:[{id:\\\"5ddd\\\",displayName:\\\"Reception\\\",members:[{id:\\\"73d7\\\"}]}]},{id:\\\"f10e\\\",location:\\\"Immenstaad\\\",errorReport:{uri:\\\"error:\\/\\/f10e\\\"},buildings:[{id:\\\"4e9c\\\",displayName:\\\"Ziegelei 7\\\",errorReport:{uri:\\\"error:\\/\\/4e9c\\\"},levels:3,base:1,roof:1,floors:[{id:\\\"0ecc\\\",displayName:\\\"H7\\/EG\\\",floorPlan:{uri:\\\"floor:\\/\\/0ecc\\\"},errorReport:{uri:\\\"error:\\/\\/0ecc\\\"},rooms:[{id:\\\"b9dd\\\",displayName:\\\"Resource IMB Room (8 Pers.)\\\",errorReport:{uri:\\\"error:\\/\\/b9dd\\\"},devices:[{id:\\\"2df2\\\",displayName:\\\"Comfortable chair\\\",deviceType:\\\"Chair\\\",errorReport:{uri:\\\"error:\\/\\/2df2\\\"}},{id:\\\"0ab3\\\",displayName:\\\"Video conference system\\\",deviceType:\\\"Multimedia\\\",errorReport:{uri:\\\"error:\\/\\/0ab3\\\"},sensorData:{uri:\\\"sensor:\\/\\/0ab3\\\"},childDevices:[{id:\\\"e43e\\\",displayName:\\\"Overhead projector\\\",deviceType:\\\"Projector\\\",errorReport:{uri:\\\"error:\\/\\/e43e\\\"},sensorData:{uri:\\\"sensor:\\/\\/e43e\\\"},childDevices:[{id:\\\"efc5\\\",displayName:\\\"Remote control\\\",deviceType:\\\"Remote\\\",errorReport:{uri:\\\"error:\\/\\/efc5\\\"},sensorData:{uri:\\\"sensor:\\/\\/efc5\\\"}},{id:\\\"2d1a\\\",displayName:\\\"Retractable projection screen\\\",deviceType:\\\"Curtain\\\",errorReport:{uri:\\\"error:\\/\\/2d1a\\\"},sensorData:{uri:\\\"sensor:\\/\\/2d1a\\\"}}]},{id:\\\"6684\\\",displayName:\\\"Tabletop microphone\\\",deviceType:\\\"Microphone\\\",errorReport:{uri:\\\"error:\\/\\/6684\\\"},sensorData:{uri:\\\"sensor:\\/\\/6684\\\"}}]}]},{id:\\\"8057\\\",displayName:\\\"Focus Room\\\",errorReport:{uri:\\\"error:\\/\\/8057\\\"},devices:[{id:\\\"dbd9\\\",displayName:\\\"Conference table\\\",deviceType:\\\"Table\\\",errorReport:{uri:\\\"error:\\/\\/dbd9\\\"}},{id:\\\"cfd1\\\",displayName:\\\"Television\\\",deviceType:\\\"Monitor\\\",errorReport:{uri:\\\"error:\\/\\/cfd1\\\"},sensorData:{uri:\\\"sensor:\\/\\/cfd1\\\"},childDevices:[{id:\\\"5593\\\",displayName:\\\"Remote control\\\",deviceType:\\\"Remote\\\",errorReport:{uri:\\\"error:\\/\\/5593\\\"},sensorData:{uri:\\\"sensor:\\/\\/5593\\\"}}]}]}]},{id:\\\"eab4\\\",displayName:\\\"H7\\/OG2\\\",floorPlan:{uri:\\\"floor:\\/\\/eab4\\\"},errorReport:{uri:\\\"error:\\/\\/eab4\\\"},rooms:[{id:\\\"9d38\\\",displayName:\\\"Training room\\\",errorReport:{uri:\\\"error:\\/\\/9d38\\\"},devices:[{id:\\\"c69c\\\",displayName:\\\"Gigantic table\\\",deviceType:\\\"Table\\\",errorReport:{uri:\\\"error:\\/\\/c69c\\\"}}]}]}]},{id:\\\"e6aa\\\",displayName:\\\"Ziegelei 5\\\",errorReport:{uri:\\\"error:\\/\\/4e9c\\\"},levels:3,base:1,roof:1,floors:[{id:\\\"10f0\\\",displayName:\\\"H5\\/OG1\\\",floorPlan:{uri:\\\"floor:\\/\\/10f0\\\"},errorReport:{uri:\\\"error:\\/\\/10f0\\\"},rooms:[{id:\\\"759d\\\",displayName:\\\"Resource IMB Room (14 Pers.)\\\",errorReport:{uri:\\\"error:\\/\\/759d\\\"},devices:[{id:\\\"96c0\\\",displayName:\\\"Round table\\\",deviceType:\\\"Table\\\",errorReport:{uri:\\\"error:\\/\\/96c0\\\"},childDevices:[{id:\\\"1538\\\",displayName:\\\"Tablecloth\\\",deviceType:\\\"Textile\\\",errorReport:{uri:\\\"error:\\/\\/1538\\\"}}]},{id:\\\"2d33\\\",displayName:\\\"Roller shade\\\",deviceType:\\\"Curtain\\\",errorReport:{uri:\\\"error:\\/\\/2d33\\\"},sensorData:{uri:\\\"sensor:\\/\\/2d33\\\"}}]}]}]}],groups:[{id:\\\"769b\\\",displayName:\\\"Floor management\\\",members:[{id:\\\"0ecc\\\"},{id:\\\"eab4\\\"},{id:\\\"10f0\\\"}]},{id:\\\"3182\\\",displayName:\\\"Appliances\\\",members:[{id:\\\"0ab3\\\"},{id:\\\"cfd1\\\"}]},{id:\\\"Table management\\\",members:[{id:\\\"dbd9\\\"},{id:\\\"c69c\\\"},{id:\\\"96c0\\\"}]}]}],version:\\\"6c57\\\"}){version}}\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Query: A Topology",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/topologies/{{namespace}}:Topology",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"query\":\"{topology{campus{buildings{roof,floors{rooms{devices{deviceType,childDevices{deviceType,childDevices{deviceType,childDevices{deviceType,childDevices{deviceType,childDevices{deviceType,displayName,id},displayName,sensorData{uri},id,errorReport{uri}},displayName,sensorData{uri},id,errorReport{uri}},displayName,sensorData{uri},id,errorReport{uri}},displayName,sensorData{uri},id,errorReport{uri}},displayName,sensorData{uri},id,errorReport{uri}},displayName,id,errorReport{uri}},displayName,floorPlan{uri},id,errorReport{uri}},displayName,id,levels,errorReport{uri},base},groups{displayName,members{id},id},location,id,errorReport{uri}},version}}\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Search: A Topology hierarchically",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/topologies/{{namespace}}:Topology",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"query\":\"{topology{campus(location:\\\"Immenstaad\\\",id:\\\"f10e\\\"){buildings(roof:1,displayName:\\\"Ziegelei 7\\\",id:\\\"4e9c\\\",levels:3,base:1){floors(displayName:\\\"H7\\/EG\\\",id:\\\"0ecc\\\"){rooms(displayName:\\\"Resource IMB Room (8 Pers.)\\\",id:\\\"b9dd\\\"){devices(deviceType:\\\"Multimedia\\\",displayName:\\\"Video conference system\\\",id:\\\"0ab3\\\"){childDevices(deviceType:\\\"Projector\\\",displayName:\\\"Overhead projector\\\",id:\\\"e43e\\\"){childDevices(deviceType:\\\"Curtain\\\",displayName:\\\"Retractable projection screen\\\",id:\\\"2d1a\\\"){deviceType,displayName,id}}}}}}}}}\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Search: A Topology through Referenceable",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/topologies/{{namespace}}:Topology",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"query\":\"{\\n  topology {\\n    campus(location: \\\"Immenstaad\\\") {\\n      groups(displayName: \\\"Appliances\\\") {\\n        members {\\n          ... on Device {\\n            displayName\\n            childDevices {\\n              displayName\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update: A Topology",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/topologies/{{namespace}}:Topology",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"query\":\"mutation{updateTopology(topology:{campus:[{id:\\\"42fd\\\",location:\\\"Berlin\\\",errorReport:{uri:\\\"error:\\/\\/42fd\\\"},buildings:[{id:\\\"cffc\\\",displayName:\\\"Sch\\u00F6neberger Ufer 89-91\\\",errorReport:{uri:\\\"error:\\/\\/cffc\\\"},levels:7,base:1,roof:0,floors:[{id:\\\"d681\\\",displayName:\\\"EG\\\",errorReport:{uri:\\\"error:\\/\\/d681\\\"},floorPlan:{uri:\\\"floor:\\/\\/d681\\\"},rooms:[{id:\\\"2c11\\\",displayName:\\\"Entrance hall\\\",errorReport:{uri:\\\"error:\\/\\/2c11\\\"},devices:[{id:\\\"72b3\\\",displayName:\\\"Glass door\\\",deviceType:\\\"Door\\\",errorReport:{uri:\\\"error:\\/\\/72b3\\\"}}]}]}]}],groups:[{id:\\\"32a5\\\",displayName:\\\"Exits\\\",members:[{id:\\\"2c11\\\"}]}]}],version:\\\"708f\\\"}){version}}\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete: A Topology",
					"request": {
						"url": "{{base.protocol}}{{base.url}}/api/1/topologies/{{namespace}}:Topology",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"query\":\"mutation{deleteTopology}\"}"
						},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}